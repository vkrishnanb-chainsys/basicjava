Compiled from "BigInteger.java"
public class java.math.BigInteger extends java.lang.Number implements java.lang.Comparable{
    final int signum;
    final int[] mag;
    static final long LONG_MASK;
    public static final java.math.BigInteger ZERO;
    public static final java.math.BigInteger ONE;
    public static final java.math.BigInteger TEN;
    static int[] bnExpModThreshTable;
    static final boolean $assertionsDisabled;
    public java.math.BigInteger(byte[]);
    public java.math.BigInteger(int, byte[]);
    public java.math.BigInteger(java.lang.String, int);
    java.math.BigInteger(char[]);
    public java.math.BigInteger(java.lang.String);
    public java.math.BigInteger(int, java.util.Random);
    public java.math.BigInteger(int, int, java.util.Random);
    public static java.math.BigInteger probablePrime(int, java.util.Random);
    public java.math.BigInteger nextProbablePrime();
    boolean primeToCertainty(int, java.util.Random);
    java.math.BigInteger(int[], int);
    public static java.math.BigInteger valueOf(long);
    public java.math.BigInteger add(java.math.BigInteger);
    public java.math.BigInteger subtract(java.math.BigInteger);
    public java.math.BigInteger multiply(java.math.BigInteger);
    java.math.BigInteger multiply(long);
    public java.math.BigInteger divide(java.math.BigInteger);
    public java.math.BigInteger[] divideAndRemainder(java.math.BigInteger);
    public java.math.BigInteger remainder(java.math.BigInteger);
    public java.math.BigInteger pow(int);
    public java.math.BigInteger gcd(java.math.BigInteger);
    static int bitLengthForInt(int);
    static void primitiveRightShift(int[], int, int);
    static void primitiveLeftShift(int[], int, int);
    public java.math.BigInteger abs();
    public java.math.BigInteger negate();
    public int signum();
    public java.math.BigInteger mod(java.math.BigInteger);
    public java.math.BigInteger modPow(java.math.BigInteger, java.math.BigInteger);
    static int mulAdd(int[], int[], int, int, int);
    static int addOne(int[], int, int, int);
    public java.math.BigInteger modInverse(java.math.BigInteger);
    public java.math.BigInteger shiftLeft(int);
    public java.math.BigInteger shiftRight(int);
    int[] javaIncrement(int[]);
    public java.math.BigInteger and(java.math.BigInteger);
    public java.math.BigInteger or(java.math.BigInteger);
    public java.math.BigInteger xor(java.math.BigInteger);
    public java.math.BigInteger not();
    public java.math.BigInteger andNot(java.math.BigInteger);
    public boolean testBit(int);
    public java.math.BigInteger setBit(int);
    public java.math.BigInteger clearBit(int);
    public java.math.BigInteger flipBit(int);
    public int getLowestSetBit();
    public int bitLength();
    public int bitCount();
    static int bitCnt(int);
    public boolean isProbablePrime(int);
    public int compareTo(java.math.BigInteger);
    final int compareMagnitude(java.math.BigInteger);
    public boolean equals(java.lang.Object);
    public java.math.BigInteger min(java.math.BigInteger);
    public java.math.BigInteger max(java.math.BigInteger);
    public int hashCode();
    public java.lang.String toString(int);
    public java.lang.String toString();
    public byte[] toByteArray();
    public int intValue();
    public long longValue();
    public float floatValue();
    public double doubleValue();
    public int compareTo(java.lang.Object);
    static {};
}

